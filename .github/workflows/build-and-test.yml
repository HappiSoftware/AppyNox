name: AppyNox CI (SingleStep)

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup SSL Certificates for Services
        run: |
          mkdir -p ./src/Gateways/AppyNox.Gateway.OcelotGateway/ssl
          echo '${{ secrets.PFX_CERTIFICATE }}' | base64 --decode > ./src/Gateways/AppyNox.Gateway.OcelotGateway/ssl/appynox.pfx
          echo '${{ secrets.CRT_CERTIFICATE }}' | base64 --decode > ./src/Gateways/AppyNox.Gateway.OcelotGateway/ssl/appynox.crt
          sudo chmod 644 ./src/Gateways/AppyNox.Gateway.OcelotGateway/ssl/appynox.pfx
          sudo chmod 644 ./src/Gateways/AppyNox.Gateway.OcelotGateway/ssl/appynox.crt

      - name: Restore dependencies
        run: dotnet restore ./AppyNox.sln

      - name: Build .NET Solution
        run: dotnet build ./AppyNox.sln --configuration Release --no-restore

      # - name: Run Unit Tests (BaseService - Infrastructure)
      #   run: dotnet test ./src/Services/.BaseService/Tests/UnitTests/AppyNox.Services.Base.Infrastructure.UnitTest/ --no-restore

      # - name: Run Unit Tests (CouponService - Infrastructure)
      #   run: dotnet test ./src/Services/CouponService/Tests/UnitTests/AppyNox.Services.Coupon.Infrastructure.UnitTest/ --no-restore

      # - name: Run Unit Tests (CouponService - Application)
      #   run: dotnet test ./src/Services/CouponService/Tests/UnitTests/AppyNox.Services.Coupon.Application.UnitTest/ --no-restore

      # - name: Run Unit Tests (LicenseService - Infrastructure)
      #   run: dotnet test ./src/Services/LicenseService/Tests/UnitTests/AppyNox.Services.License.Infrastructure.UnitTest/ --no-restore

      # - name: Run Unit Tests (LicenseService - Application)
      #   run: dotnet test ./src/Services/LicenseService/Tests/UnitTests/AppyNox.Services.License.Application.UnitTest/ --no-restore

      # - name: Run Unit Tests (SsoService - Application)
      #   run: dotnet test ./src/Services/SsoService/Tests/UnitTests/AppyNox.Services.Sso.Application.UnitTest/ --no-restore

      # - name: Run Unit Tests (SsoService - WebAPI)
      #   run: dotnet test ./src/Services/SsoService/Tests/UnitTests/AppyNox.Services.Sso.WebAPI.UnitTest/ --no-restore 

      - name: Trust self-signed certificate
        run: |
          echo "${{ secrets.CRT_CERTIFICATE }}" | base64 --decode > appynox.crt
          sudo cp appynox.crt /usr/local/share/ca-certificates/
          sudo update-ca-certificates

      - name: Verify Trusted Certificates
        run: |
          echo "Listing trusted certificates:"
          sudo ls -l /etc/ssl/certs/ | grep appynox
          sudo openssl x509 -in /usr/local/share/ca-certificates/appynox.crt -text -noout

      # - name: Create Redis ACL file
      #   run: echo '${{ secrets.REDIS_ACL }}' > ./redis.acl

      - name: Build Docker Images
        run: docker compose build

      # - name: Start Docker Containers
      #   run: docker compose up -d

      # - name: Find Container ID of appynox-gateway-ocelotgateway
      #   id: find_container_id
      #   run: echo "::set-output name=container_id::$(docker ps -qf name=appynox-gateway-ocelotgateway)"

      # - name: Enter appynox-gateway-ocelotgateway Container and Check Health
      #   run: |
      #       container_id=${{ steps.find_container_id.outputs.container_id }}
      #       echo "Container ID: $container_id"
      #       docker exec -i $container_id bash -c "curl http://appynox-services-sso-webapi:7001/api/health"

      # - name: Find Container ID of appynox-services-sso-webapi
      #   id: find_sso_id
      #   run: echo "::set-output name=container_id::$(docker ps -qf name=appynox-services-sso-webapi)"

      # - name: Find Container ID of appynox-rabbitmq
      #   id: fin_rabbitmq_id
      #   run: echo "::set-output name=container_id::$(docker ps -qf name=appynox-rabbitmq)"

      # - name: Wait 5 Minutes Before Printing Logs
      #   run: sleep 300

      # - name: Print Logs of appynox-services-sso-webapi
      #   run: |
      #     container_id=${{ steps.find_sso_id.outputs.container_id }}
      #     echo "Container ID: $container_id"           
      #     docker logs $container_id

      # - name: Print Logs of appynox-rabbitmq
      #   run: |
      #     container_id=${{ steps.fin_rabbitmq_id.outputs.container_id }}
      #     echo "Container ID: $container_id"           
      #     docker logs $container_id

      - name: Run Integration Tests (SsoService)
        run: dotnet test ./src/Services/SsoService/Tests/IntegrationTests/AppyNox.Services.Sso.WebAPI.IntegrationTest --no-restore

      - name: Run Integration Tests (CouponService)
        run: dotnet test ./src/Services/CouponService/Tests/IntegrationTests/AppyNox.Services.Coupon.WebAPI.IntegrationTest --no-restore

      - name: Run Integration Tests (LicenseService)
        run: dotnet test ./src/Services/LicenseService/Tests/IntegrationTests/AppyNox.Services.License.WebAPI.IntegrationTest --no-restore  
