# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '39 17 * * 4'

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
        # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
        # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v3

    - name: Setup SSL Certificates for Services
      run: |
        mkdir -p ./src/Gateways/AppyNox.Gateway.OcelotGateway/ssl
        mkdir -p ./src/Services/CouponService/Tests/IntegrationTests/AppyNox.Services.Coupon.WebAPI.IntegrationTest/ssl
        mkdir -p ./src/Services/LicenseService/Tests/IntegrationTests/AppyNox.Services.License.WebAPI.IntegrationTest/ssl
        echo '${{ secrets.PFX_CERTIFICATE }}' | base64 --decode > ./src/Gateways/AppyNox.Gateway.OcelotGateway/ssl/appynox.pfx
        echo '${{ secrets.PFX_CERTIFICATE }}' | base64 --decode > ./src/Services/CouponService/Tests/IntegrationTests/AppyNox.Services.Coupon.WebAPI.IntegrationTest/ssl/appynox.pfx
        echo '${{ secrets.PFX_CERTIFICATE }}' | base64 --decode > ./src/Services/LicenseService/Tests/IntegrationTests/AppyNox.Services.License.WebAPI.IntegrationTest/ssl/appynox.pfx
        sudo chmod 644 ./src/Gateways/AppyNox.Gateway.OcelotGateway/ssl/appynox.pfx
        sudo chmod 644 ./src/Services/CouponService/Tests/IntegrationTests/AppyNox.Services.Coupon.WebAPI.IntegrationTest/ssl/appynox.pfx
        sudo chmod 644 ./src/Services/LicenseService/Tests/IntegrationTests/AppyNox.Services.License.WebAPI.IntegrationTest/ssl/appynox.pfx

    - name: Create Ocelot Settings for Gateway
      run: |
        echo '${{ secrets.GATEWAY_OCELOT_STAGING }}' > ./src/Gateways/AppyNox.Gateway.OcelotGateway/ocelot.Staging.json
        echo '${{ secrets.GATEWAY_OCELOT_PRODUCTION }}' > ./src/Gateways/AppyNox.Gateway.OcelotGateway/ocelot.Production.json
        echo '${{ secrets.GATEWAY_APPSETTINGS_STAGING }}' > ./src/Gateways/AppyNox.Gateway.OcelotGateway/appsettings.Staging.json
        echo '${{ secrets.GATEWAY_APPSETTINGS_PRODUCTION }}' > ./src/Gateways/AppyNox.Gateway.OcelotGateway/appsettings.Production.json

    - name: Create Authentication Service appsettings
      run: |
        echo '${{ secrets.AUTHENTICATION_APPSETTINGS_STAGING }}' > ./src/Services/AuthenticationService/AppyNox.Services.Authentication.WebAPI/appsettings.Staging.json
        echo '${{ secrets.AUTHENTICATION_APPSETTINGS_PRODUCTION }}' > ./src/Services/AuthenticationService/AppyNox.Services.Authentication.WebAPI/appsettings.Production.json

    - name: Create Coupon Service appsettings
      run: |
        echo '${{ secrets.COUPON_APPSETTINGS_STAGING }}' > ./src/Services/CouponService/AppyNox.Services.Coupon.WebAPI/appsettings.Staging.json
        echo '${{ secrets.COUPON_APPSETTINGS_STAGING }}' > ./src/Services/CouponService/Tests/IntegrationTests/AppyNox.Services.Coupon.WebAPI.IntegrationTest/appsettings.Staging.json
        echo '${{ secrets.COUPON_APPSETTINGS_PRODUCTION }}' > ./src/Services/CouponService/AppyNox.Services.Coupon.WebAPI/appsettings.Production.json

    - name: Create License Service appsettings
      run: |
        echo '${{ secrets.LICENSE_APPSETTINGS_STAGING }}' > ./src/Services/LicenseService/AppyNox.Services.License.WebAPI/appsettings.Staging.json
        echo '${{ secrets.LICENSE_APPSETTINGS_STAGING }}' > ./src/Services/LicenseService/Tests/IntegrationTests/AppyNox.Services.License.WebAPI.IntegrationTest/appsettings.Staging.json
        echo '${{ secrets.LICENSE_APPSETTINGS_PRODUCTION }}' > ./src/Services/LicenseService/AppyNox.Services.License.WebAPI/appsettings.Production.json

    - name: Copy Docker Compose file
      run: |
        cp ./docker-compose.yml ./src/Services/CouponService/Tests/IntegrationTests/AppyNox.Services.Coupon.WebAPI.IntegrationTest/docker-compose.yml
        cp ./docker-compose.Staging.yml ./src/Services/CouponService/Tests/IntegrationTests/AppyNox.Services.Coupon.WebAPI.IntegrationTest/docker-compose.Staging.yml

    - name: Restore dependencies
      run: dotnet restore ./AppyNox.sln

    - name: Build .NET Solution
      run: dotnet build ./AppyNox.sln --configuration Release --no-restore

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
