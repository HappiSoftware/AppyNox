// <auto-generated />
using System;
using AppyNox.Services.License.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AppyNox.Services.License.Infrastructure.Migrations
{
    [DbContext(typeof(LicenseDatabaseContext))]
    [Migration("20240110001024_AddApplicationUserLicenseMacAddress")]
    partial class AddApplicationUserLicenseMacAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppyNox.Services.License.Domain.Entities.ApplicationUserLicenseMacAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserLicenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserLicenseId");

                    b.ToTable("ApplicationUserLicenseMacAddresses");
                });

            modelBuilder.Entity("AppyNox.Services.License.Domain.Entities.ApplicationUserLicenses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.HasIndex("UserId", "LicenseId")
                        .IsUnique();

                    b.ToTable("ApplicationUserLicenses");
                });

            modelBuilder.Entity("AppyNox.Services.License.Domain.Entities.LicenseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(true)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxMacAddresses")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00455e60-8524-48df-955c-cc9b1f2e7476"),
                            Code = "LK001",
                            CompanyId = new Guid("221e8b2c-59d5-4e5b-b010-86c239b66738"),
                            Description = "License Description",
                            ExpirationDate = new DateTime(2025, 1, 9, 0, 10, 24, 115, DateTimeKind.Utc).AddTicks(3656),
                            LicenseKey = "7f033381-fbf7-4929-b5f7-c64261b20bf3",
                            MaxMacAddresses = 1,
                            MaxUsers = 3
                        });
                });

            modelBuilder.Entity("AppyNox.Services.License.Domain.Entities.ApplicationUserLicenseMacAddress", b =>
                {
                    b.HasOne("AppyNox.Services.License.Domain.Entities.ApplicationUserLicenses", "ApplicationUserLicense")
                        .WithMany("MacAddresses")
                        .HasForeignKey("ApplicationUserLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserLicense");
                });

            modelBuilder.Entity("AppyNox.Services.License.Domain.Entities.ApplicationUserLicenses", b =>
                {
                    b.HasOne("AppyNox.Services.License.Domain.Entities.LicenseEntity", "License")
                        .WithMany("ApplicationUserLicenses")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");
                });

            modelBuilder.Entity("AppyNox.Services.License.Domain.Entities.ApplicationUserLicenses", b =>
                {
                    b.Navigation("MacAddresses");
                });

            modelBuilder.Entity("AppyNox.Services.License.Domain.Entities.LicenseEntity", b =>
                {
                    b.Navigation("ApplicationUserLicenses");
                });
#pragma warning restore 612, 618
        }
    }
}
