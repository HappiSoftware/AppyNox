@page "/pages/authentication/login"
@using AppyNox.Services.Sso.Application.AsyncLocals
@using AppyNox.Services.Sso.Application.DTOs.AccountDtos.Models
@using AppyNox.Services.Sso.Application.MediatR.Commands
@using AppyNox.Services.Sso.Domain.Entities
@using AppyNox.Services.Sso.Server.UI.Components.Shared.Layout
@using MediatR
@using Microsoft.AspNetCore.Authentication
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@layout AuthenticationLayout

@inject ILogger<Login> Logger
@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<Login> L
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject IMediator Mediator
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>@_title</PageTitle>


<MudGrid>
    <MudItem xs="12" md="6" Class="hide-on-mobile">
        <MudPaper Elevation="4">
            <MudImage Src="img/light.png" Alt="AppyNox Sso" Class="mud-width-full mud-height-full" />
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="6">
        <div class="login-right-panel">
            <div class="d-flex justify-content-between">
                <MudImage Src="img/appynox.png" Alt="AppyNox" Style="width:80px; height:80px;" />
                <div class="d-flex justify-content align-center">
                    <MudText Typo="Typo.h6">AppyNox SSO</MudText>
                </div>
                <div class="d-flex justify-content-end">
                    <LanguageSelector />
                </div>
            </div>
            <br />
            <br />
            <EditForm Model="Input" method="post" OnValidSubmit="OnSubmit" FormName="login">
                <DataAnnotationsValidator />
                <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign In"]</MudText>
                <StatusMessage Message="@errorMessage" Error="true" />
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText @bind-Value="Input.UserName" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" autocomplete="username" aria-required="true" placeholder="user name" />
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="userName">@L["User name"]</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <div class="d-flex">
                            <ValidationMessage For="() => Input.UserName" class="mud-input-error" />
                        </div>
                    </div>
                </div>
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText type="password" @bind-Value="Input.Password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="password">@L["Password"]</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <div class="d-flex">
                            <ValidationMessage For="() => Input.Password" class="mud-input-error" />
                        </div>
                    </div>
                </div>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit"
                           FullWidth="true">
                    <MudText>@L["Sign In"]</MudText>
                </MudButton>
            </EditForm>
        </div>
    </MudItem>
</MudGrid>



@code {
    public const string PageUrl = "/pages/authentication/login";
    private string? errorMessage;
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    private string _title = "Sign In";
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromForm]
    private LoginDto Input { get; set; } = new()
    {
        UserName = "Admin",
        Password = "Admin@123",
        Audience = "AppyNox"
    };

    protected override async Task OnInitializedAsync()
    {
        _title = L["Sign In"];
        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task OnSubmit()
    {
        try
        {
            // Set the SsoContext values manually
            SsoContext.IsConnectRequest = true;

            var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, false, false);
            if (result.Succeeded)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                // Handle login failure
            }
        }
        catch (Exception ex)
        {
            // Handle errors
        }
        finally
        {
            // Reset the SsoContext values manually
            SsoContext.IsConnectRequest = false;
            SsoContext.CompanyId = Guid.Empty;
            SsoContext.IsAdmin = false;
            SsoContext.IsSuperAdmin = false;
        }
    }
}